name: Playwright CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # Linux environment to run the tests

    services:
      docker:
        image: docker:20.10  # Use the Docker service for containerization
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        # Checkout the codebase for testing

      - name: Set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        # Install all necessary packages (Playwright, Node, etc.)

      - name: Build Docker container
        run: |
          docker build -t playwright-container .
        # Build the Docker image using the Dockerfile provided

      - name: Run Playwright tests in Docker
        run: |
          docker run -v ${{ github.workspace }}:/usr/src/app -w /usr/src/app playwright-container npx playwright test --project=chromium
        # Run the Playwright tests inside the container using the project configuration

      - name: Upload test results and screenshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: playwright-results
          path: |
            test-results/
            screenshots/
        # If tests fail, upload the test results and screenshots for later review

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v2
        with:
          name: playwright-html-report
          path: playwright-report
        # Upload the Playwright HTML report for test analysis

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying the latest test-passed version..."
          # Here, add any deployment commands, such as to AWS, GCP, or Heroku, if the tests pass
