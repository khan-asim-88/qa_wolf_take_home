name: Playwright CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # Use Ubuntu as the CI environment

    services:
      docker:
        image: docker:20.10  # Use Docker to containerize the environment
        options: --privileged

    steps:
      # Step 1: Checkout the repository to get the code
      - name: Checkout repository
        uses: actions/checkout@v2
        # This ensures the CI pipeline has access to your project files

      # Step 2: Set up Node.js environment with the specified version
      - name: Set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '20'
        # This ensures that Node.js is installed and ready for running scripts

      # Step 3: Build Docker container from the Dockerfile
      - name: Build Docker container
        run: |
          docker build -t playwright-container .
        # Builds a Docker image using the Dockerfile in your project

      # Step 4: Run only Node.js script (index.js)
      - name: Run Node.js script in Docker
        run: |
          docker run -e RUN=node -v ${{ github.workspace }}:/usr/src/app -w /usr/src/app playwright-container
        # This runs only the custom Node.js script (index.js) inside the container

      # Step 5: Run Playwright tests in Docker for all browsers
      - name: Run Playwright tests in Docker
        run: |
          docker run -e RUN=test -v ${{ github.workspace }}:/usr/src/app -w /usr/src/app playwright-container
        # This runs only the Playwright tests inside the container

      # Step 6: Upload test results and screenshots if the tests fail
      - name: Upload test results and screenshots
        if: failure()
        uses: actions/upload-artifact@v3  # Updated to the latest version
        with:
          name: playwright-results
          path: |
            test-results/
            screenshots/
        # If any tests fail, this step uploads the test results and screenshots

      # Step 7: Upload the Playwright HTML report
      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v3  # Updated to the latest version
        with:
          name: playwright-html-report
          path: playwright-report
        # This step uploads the Playwright HTML report generated after the tests

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying the latest test-passed version..."
        # This is a placeholder step, modify it for your actual deployment
